This program implements Johnson's algorithm for the all-pairs shortest-
path problem. There are three data files describing three graphs: g1.txt. g2.txt,
g3.txt.  

The first line indicates the number of vertices and edges, respectively. Each subsequent 
line describes an edge (the first two numbers are its tail and head, respectively) and 
its length (the third number). NOTE: some of the edge lengths are negative. NOTE: These 
graphs may or may not have negative-cost cycles.

Johnson's algorithm is a multi-step process.  First it runs the Bellman-
Ford algorithm on a graph once, and reweights the edges based on the results.
This gives you a graph with all non-negative edges.  So then we can use 
Dijkstra's algorithm to compute shortest paths, which is much more efficient!

This program computes the "shortest shortest path". Precisely, you must first identify 
which, if any, of the three graphs have no negative cycles. For each such graph, you 
should compute all-pairs shortest paths and remember the smallest one (i.e., compute 
minu,vâˆˆVd(u,v), where d(u,v) denotes the shortest-path distance from u to v).


g1: negative cycle
g2: negative cycle
g3: -19

There is a test file text.txt which describes a small graph.
test: -6


